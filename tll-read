#!/usr/bin/env python3
# vim: sts=4 sw=4 et

import argparse
import collections
import decimal
import enum
import logging
import signal
import sys
import traceback
import yaml

from tll import logger
from tll.channel import Context
from tll.chrono import TimePoint, Duration
from tll.config import Config, Url
from tll.processor import Loop

def parsepair(string):
    r = string.split('=', 1)
    if len(r) != 2:
        raise ValueError("Invalid key=value pair")
    return r

parser = argparse.ArgumentParser(description='Read messages from channel', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('channel', metavar='CHANNEL', type=str, nargs='?',
                    help='source channel, if proto:// is missing treat as file://CHANNEL')
parser.add_argument('-l', '--loglevel', dest='loglevel', default='warning',
                    help='logging level', choices=['trace', 'debug', 'info', 'warning', 'error', 'critical'])
parser.add_argument('-c', '--config', dest='config',
                    help='load CONFIG for additional parameters, if CHANNEL is empty - take it from config')
parser.add_argument('-S', '--scheme', metavar='SCHEME', type=str,
                    help='scheme url')
parser.add_argument('--no-autoclose', dest='autoclose', action='store_false', default=True,
                    help='do not autoclose channel')
parser.add_argument('--ignore-errors', dest='ignore_errors', action='store_true', default=False,
                    help="Skip messages that can not be unpacked")
parser.add_argument('--hex', dest='hexdump', action='store_true', default=False,
                    help="Print hex dump for all messages")
parser.add_argument('--text', dest='text', action='store_true', default=False,
                    help="Print text representation instead of binary")
parser.add_argument('--dump-seq', dest='dump_seq', action='store_true', default=False,
                    help='dump first and last seq of the channel and exit')
parser.add_argument('--help-rst', action='store_true', default=False,
                    help='print help in RST format for manpage')

channels = parser.add_argument_group('Channel options')
channels.add_argument('-m', '--module', dest='modules', action='append',
                    default=[], metavar='MODULE',
                    help='additional channel modules, can be given several times')
channels.add_argument('-E', '--extra-channel', dest='extra_channels', action='append', default=[],
                    help='extra channels, can be given several times', metavar='CHANNEL')
channels.add_argument('-M', '--master', dest='master',
                    help='master object for reading channel')
channels.add_argument('--resolve', dest='resolve', metavar='ADDRESS',
                    help='address of resolve server to use in resolve:// channels')
channels.add_argument('-O', '--open', dest='open', metavar='KEY=VALUE',
                    help='open parameters, can be specified multiple times', action='append', default=[], type=parsepair)
channels.add_argument('--poll', action='store_true', default=False,
                    help='enable polling, can reduce CPU load if script is used to monitor network channel like pub+tcp')

filtering = parser.add_argument_group('Filtering')
filtering.add_argument('-f', '--filter', dest='filter',
                    help='''lua filter expression that can use variables "seq", "name", "data", "addr" and "time"
and evaluates to boolean value. If expression is true then message is printed, otherwise it is skipped''')
filtering.add_argument('-F', '--filter-file', dest='filter_file', metavar='FILE',
                    help='lua file with filter script, for supported functions see manpage for tll-channel-lua')
filtering.add_argument('--seq-list', dest='seq_list', metavar='SEQ0[,SEQ1...]', type=lambda s: [int(x.strip()) for x in s.split(',')],
                    help='limit output to given seq numbers, comma separated list')
filtering.add_argument('--message', dest='messages', action='append',
                    help='filter by message name, can be specified several times')
filtering.add_argument('--dump-code', dest='dump_code', action='store_true', default=False,
                    help='dump generated lua filter code and exit, can be used to create skeleton file with empty functions')

class SeqType(enum.Enum):
    Nothing = 0
    Seq = 1
    Count = 2
    Reverse = 3

Seq = collections.namedtuple('Seq', ['type', 'value'])
Seq.Type = SeqType

def parseone(string):
    if string == '':
        return Seq(Seq.Type.Nothing, 0)
    elif string.startswith('+'):
        return Seq(Seq.Type.Count, int(string[1:]))
    elif string.startswith('-'):
        return Seq(Seq.Type.Reverse, int(string[1:]))
    return Seq(Seq.Type.Seq, int(string))

def parseseq(string):
    r = string.split(':')
    if len(r) == 1:
        return (parseone(r[0]), Seq(Seq.Type.Count, 1))
    elif len(r) == 2:
        return (parseone(r[0]), parseone(r[1]))
    else:
        raise ValueError("Invalid seq format")

parser.add_argument('-s', '--seq', dest='seq', type=parseseq,
                    default=(parseone(''), parseone('')), metavar='BEGIN[:[END]]',
                    help='''define range of messages that should be printed.
One of three different forms can be used:

 - BEGIN - print only one message at BEGIN
 - BEGIN: - print all messages starting with BEGIN
 - BEGIN:END - print messages between BEGIN and END (including borders)

Borders (BEGIN and END) may be in one of the following forms:

 - +N - number of messages, for BEGIN - number of messages skipped from the start of the data
   stream, for END - number of messages printed from the BEGIN. For example ":+1" will print
   one message from the start and "+1:" will skip one and print everything else
 - -N - sequence number equals to last seq - N, for example -0 is last message, can be used only
   for BEGIN. Notice that -10 can print only one message if sequence numbers are not contingous,
   for example for stream (0, 100, 200, ..., 1000) -10 will be 990 and only 1000 matches range
   of [990, inf)
 - SEQ - sequence number of the message, integer value without + or - in the front
''')

args = parser.parse_args()

if args.help_rst:
    for g in parser._action_groups:
        title = g.title[:1].upper() + g.title[1:]
        print(f'''{title}
{'~' * len(g.title)}
''')
        '''
        for k,v in g.__dict__.items():
            print(k, v)
            '''
        for a in g._group_actions:
            if not a.option_strings:
                print(f'``{a.metavar}``')
            else:
                metavar = f' {a.metavar}' if a.metavar else ''
                print(' '.join([f'``{o}{metavar}``' for o in a.option_strings]))
            print(a.help.replace('"', '``'))
            print()
    raise SystemExit()

if args.seq[1].type == Seq.Type.Reverse:
    raise SystemExit(f"Negative index not supported for second position: --seq XXX:-{args.seq[1].value}")

logger.init()
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-7s %(name)s: %(message)s')
logger.configure({'levels.*': args.loglevel})

if args.config:
    cfg = yaml.safe_load(open(args.config))
    c = cfg.pop('channel', None)
    if c and not args.channel:
        args.channel = c
    for k,v in cfg.items():
        if not hasattr(args, k):
            continue
        a = getattr(args, k)
        if k in ('modules', 'messages', 'extra_channels'):
            setattr(args, k, list(set(a + v),))
        elif k in ('open',):
            setattr(args, k, v.items() + a)
        elif not a:
            setattr(args, k, v)

def build_code(args):
    if args.filter_file:
        if args.seq_list or args.messages or args.filter:
            raise SystemExit("Conflicting script file and custom filters")
        return 'file://' + args.filter_file
    if not (args.messages or args.seq_list or args.filter or args.dump_code):
        return None
    code = []
    code += ['function tll_on_open(cfg)']
    code += ['end']
    code += ['function tll_on_close()']
    code += ['end']
    code += ['function tll_filter(seq, name, data, msgid, addr, time)']
    if args.seq_list:
        code += ['    if ' + ' and '.join(f'seq ~= {s}' for s in args.seq_list) + ' then return false end']
    if args.messages:
        code += ['    if ' + ' and '.join(f'name ~= "{s}"' for s in args.messages) + ' then return false end']
    if args.filter:
        code += ['    return ' + args.filter]
    else:
        code += ['    return true']
    code += ['end']
    return '\n'.join(code)

code = build_code(args)
if args.dump_code:
    print(code or '')
    sys.exit(0)

if not args.channel:
    parser.print_usage()
    raise SystemExit(f'No CHANNEL in config and in command line')

defaults = Config()
if args.resolve:
    proto = 'tcp://' if '://' not in args.resolve else ''
    defaults['resolve.request'] = f'{proto}{args.resolve}'
ctx = Context(defaults)
for m in args.modules:
    ctx.load(m)
loop = Loop(ctx, config={'poll': str(args.poll).lower()})

def loop_stop(c, m):
    if m.type != m.Type.State:
        return
    if c.State(m.msgid) in (c.State.Closed, c.State.Error):
        loop.stop = 1

extra = []
for url in args.extra_channels:
    c = ctx.Channel(url)
    c.callback_add(loop_stop, mask=c.MsgMask.State)
    loop.add(c)
    extra += [c]

master = None
if args.master:
    master = ctx.Channel(args.master, name='master')
    master.callback_add(loop_stop, mask=master.MsgMask.State)
    loop.add(master)

if '://' not in args.channel:
    args.channel = 'file://' + args.channel

url = Url.parse(args.channel)
if args.scheme:
    url['scheme'] = args.scheme
if 'name' not in url:
    url['name'] = 'data'
if 'autoclose' not in url and args.autoclose:
    url['autoclose'] = 'yes'

if code is not None:
    if not ctx.has_impl('lua+'):
        ctx.load('tll-lua')
    url.proto = 'lua+' + url.proto
    url['lua.code'] = code

# TODO: Move to lua
count = -1
skip = 0
seq_last = -1
if args.seq[0].type == Seq.Type.Count:
    skip = args.seq[0].value
if args.seq[1].type == Seq.Type.Count:
    count = args.seq[1].value
elif args.seq[1].type == Seq.Type.Seq:
    seq_last = args.seq[1].value

def bytearray_representer(dumper, data):
    if all(x < 0x80 for x in data):
        return dumper.represent_scalar('tag:yaml.org,2002:str', data.decode('ascii'))
    return dumper.represent_binary(data)
yaml.add_representer(bytearray, bytearray_representer)

def decimal_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', str(data))
yaml.add_representer(decimal.Decimal, decimal_representer)

def timepoint_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', str(data))
yaml.add_representer(TimePoint, timepoint_representer)

def duration_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', str(data))
yaml.add_representer(Duration, duration_representer)

def enum_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data.name)
yaml.add_multi_representer(enum.Enum, enum_representer)

class LiteralString(str):
    pass
def literal_representer(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', str(data), style='|')
yaml.add_representer(LiteralString, literal_representer)

# Don't generate aliases
yaml.Dumper.ignore_aliases = lambda *args: True

def hexdump(data):
    r = []
    for i in range(0, len(data), 16):
        b = data[i : i + 16]
        parts = ["".join(f"{x:02x} " for x in b[4 * j:4 * j + 4]) for j in range(4)]
        printable = "".join(chr(x) if 32 <= x < 127 else "." for x in b)
        yield f"{i:08x}:  {parts[0]:12} {parts[1]:12} {parts[2]:12} {parts[3]:12} {printable}"

def format_data(c, msg):
    global skip, count, seq_last
    if skip != 0:
        skip -= 1
        return
    if count == 0 or (seq_last >= 0 and msg.seq > seq_last):
        loop.stop = 1
        return
    count -= 1

    meta = {'seq':msg.seq}
    try:
        s = c.scheme
        #meta = collections.OrderedDict({'seq':msg.seq})
        if not s:
            meta['msgid'] = msg.msgid
            if args.text:
                meta['data'] = LiteralString(msg.data.tobytes().decode('utf-8'))
            else:
                meta['data'] = msg.data.tobytes()
        else:
            m = s.unpack(msg)
            meta['name'] = m.SCHEME.name
            meta['data'] = m.as_dict()
        if args.hexdump:
            meta['hex'] = LiteralString('\n'.join(hexdump(msg.data)))
        print(yaml.dump([meta], sort_keys=False, allow_unicode=True))
    except Exception as e:
        if args.ignore_errors:
            meta['msgid'] = msg.msgid
            meta['error'] = f'Failed to unpack message: {e}'
            meta['data'] = msg.data.tobytes()
            if args.hexdump:
                meta['hex'] = LiteralString('\n'.join(hexdump(msg.data)))
            print(yaml.dump([meta], sort_keys=False, allow_unicode=True))
        else:
            print("Failed to process message")
            traceback.print_exc()
            loop.stop = 1

channel = ctx.Channel(url, master=master)
channel.callback_add(loop_stop, mask=channel.MsgMask.State)
loop.add(channel)

for c in extra:
    c.open()

if master:
    master.open()
    while master.state != master.State.Active:
        loop.step(1)

cfg = Config()
for k,v in args.open:
    cfg[k] = v

if args.seq[0].type == Seq.Type.Seq:
    cfg['seq'] = str(args.seq[0].value)

if args.seq[0].type == Seq.Type.Reverse or args.dump_seq:
    channel.open()
    while channel.state == channel.State.Opening:
        loop.step(0.001)
    last = channel.config.get('info.seq', None)
    first = channel.config.get('info.seq-begin', None)
    channel.close()
    if args.dump_seq:
        print(f'''First seq: {first or ''}
Last seq: {last or ''}''')
        del channel
        raise SystemExit()
    if not last:
        raise SystemExit("Channel has no 'info.seq' field in config")
    cfg['seq'] = str(int(last) - args.seq[0].value)
    loop.stop = 0

channel.callback_add(format_data, mask=channel.MsgMask.Data)
channel.open(cfg)

signal.signal(signal.SIGINT, signal.SIG_DFL)
try:
    loop.run(1)
finally:
    channel.free()
    if master:
        master.free()
    for c in extra:
        c.free()
